name: Build and Deploy Solar System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  build:
    name: Build
    uses: ./.github/workflows/build.yml
    secrets:
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
      MONGO_TEST_PASSWORD: ${{ secrets.MONGO_TEST_PASSWORD }}

  docker:
    name: docker
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Image and Push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

  add-dev-env-variables:
    runs-on: ubuntu-latest
    needs: docker
    environment: development
    outputs:
      environment: ${{ steps.addDevEnv.outputs.environment }}
      mongo-uri: ${{ steps.addDevEnv.outputs.mongo-uri }}
    steps:
      - name: Add env variables
        id: addDevEnv
        run: |
          echo "environment=${{ vars.ENVIRONMENT }}" >> $GITHUB_OUTPUT
          echo "mongo-uri=${{ vars.MONGO_URI }}" >> $GITHUB_OUTPUT
          echo ${{ vars.MONGO_URI }}

  dev-deploy:
    name: Development
    needs: add-dev-env-variables
    uses: ./.github/workflows/deploy.yml
    secrets:
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD}}
      MONGO_TEST_PASSWORD: ${{ secrets.MONGO_TEST_PASSWORD }}
      DIGITAL_OCEAN_TOKEN: ${{ secrets.DIGITAL_OCEAN_TOKEN }}
      CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    with:
      host-runner: ubuntu-latest
      mongo-uri: ${{ needs.add-dev-env-variables.outputs.mongo-uri }}
      kube-version: 'v1.31.1'
      environment: ${{ needs.add-dev-env-variables.outputs.development }}
      kube-manifest-dir: kubernetes/${{ needs.add-dev-env-variables.outputs.environment }}
      docker-username: ${{ vars.DOCKER_USERNAME }}
      namespace: ${{ vars.NAMESPACE }}
      image: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

  dev-integration-test:
    name: Development Integration Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test Application Using Curl
        env:
          URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo ${{ env.URL }}
          echo "-------------------------"
          curl https://${{ env.URL }}/live -s -k | jq -r .status | grep -i "live"

#  prod-deploy:
#    needs: dev-integration-test
#    runs-on: ubuntu-latest
#    environment:
#      name: production
#      url: https://${{ steps.getUrl.outputs.INGRESS_APP_URL }}
#    outputs:
#      APP_INGRESS_URL:  ${{ steps.getUrl.outputs.INGRESS_APP_URL }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: install kubectl
#        uses: azure/setup-kubectl@v4
#        with:
#          version: 'v1.31.1'
#        id: install
#
#      - name: Install doctl
#        uses: digitalocean/action-doctl@v2
#        with:
#          token: ${{ secrets.DIGITAL_OCEAN_TOKEN }}
#
#      - name: Save DigitalOcean kubeconfig
#        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}
#
#      - name: Fetch Kube Details
#        run: |
#          kubectl version
#          echo -----------------------
#          kubectl get nodes
#
#      - name: Get Kube LoadBalancer HostName
#        run: |
#          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV
#
#      - name: Replace Tokens In Manifest Files
#        uses: cschleiden/replace-tokens@v1
#        with:
#          tokenPrefix: '_{_'
#          tokenSuffix: '_}_'
#          files: '["kubernetes/production/*.yaml"]'
#        env:
#          NAMESPACE: ${{ vars.NAMESPACE }}
#          REPLICAS: ${{ vars.REPLICAS }}
#          IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
#          INGRESS_IP: ${{ env.INGRESS_IP }}
#
#      - name: Check Files
#        run: |
#          cat kubernetes/production/*.yaml
#
#      - name: Create Mongo Secret
#        run: |
#          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
#          --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
#          --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
#          --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
#          --dry-run=client -o yaml | kubectl apply -f -
#
#      - name: Deploy To DEV
#        run: |
#          kubectl apply -f kubernetes/production
#
#      - name: Get URL
#        id: getUrl
#        run: |
#          echo "INGRESS_APP_URL=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_OUTPUT
#          echo "-------------------------------"
#          echo $INGRESS_APP_URL
#
#  prod-integration-test:
#    name: Production Integration Testing
#    needs: prod-deploy
#    runs-on: ubuntu-latest
#    steps:
#      - name: Test Application Using Curl
#        env:
#          URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
#        run: |
#          echo ${{ env.URL }}
#          echo "-------------------------"
#          curl https://${{ env.URL }}/live -s -k | jq -r .status | grep -i "live"
